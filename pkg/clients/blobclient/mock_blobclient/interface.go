// Code generated by MockGen. DO NOT EDIT.
// Source: goms.io/aks/rp/core/clients/blobclient (interfaces: Interface)

// Package mock_blobclient is a generated GoMock package.
package mock_blobclient

import (
	context "context"
	reflect "reflect"

	storage "github.com/Azure/azure-sdk-for-go/storage"
	gomock "github.com/golang/mock/gomock"
	blobclient "github.com/Azure/aks-deployer/pkg/clients/blobclient"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AcquireLease mocks base method.
func (m *MockInterface) AcquireLease(arg0 context.Context, arg1, arg2, arg3 string, arg4 uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireLease", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireLease indicates an expected call of AcquireLease.
func (mr *MockInterfaceMockRecorder) AcquireLease(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLease", reflect.TypeOf((*MockInterface)(nil).AcquireLease), arg0, arg1, arg2, arg3, arg4)
}

// BlobExists mocks base method.
func (m *MockInterface) BlobExists(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlobExists", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobExists indicates an expected call of BlobExists.
func (mr *MockInterfaceMockRecorder) BlobExists(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobExists", reflect.TypeOf((*MockInterface)(nil).BlobExists), arg0, arg1, arg2, arg3)
}

// BreakLease mocks base method.
func (m *MockInterface) BreakLease(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BreakLease", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// BreakLease indicates an expected call of BreakLease.
func (mr *MockInterfaceMockRecorder) BreakLease(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BreakLease", reflect.TypeOf((*MockInterface)(nil).BreakLease), arg0, arg1, arg2, arg3, arg4)
}

// ContainerExists mocks base method.
func (m *MockInterface) ContainerExists(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerExists indicates an expected call of ContainerExists.
func (mr *MockInterfaceMockRecorder) ContainerExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExists", reflect.TypeOf((*MockInterface)(nil).ContainerExists), arg0, arg1, arg2)
}

// CreateContainer mocks base method.
func (m *MockInterface) CreateContainer(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockInterfaceMockRecorder) CreateContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockInterface)(nil).CreateContainer), arg0, arg1, arg2)
}

// CreateContainerWithACL mocks base method.
func (m *MockInterface) CreateContainerWithACL(arg0 context.Context, arg1, arg2 string, arg3 blobclient.BlobPublicAccessLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerWithACL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerWithACL indicates an expected call of CreateContainerWithACL.
func (mr *MockInterfaceMockRecorder) CreateContainerWithACL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerWithACL", reflect.TypeOf((*MockInterface)(nil).CreateContainerWithACL), arg0, arg1, arg2, arg3)
}

// DeleteContainer mocks base method.
func (m *MockInterface) DeleteContainer(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockInterfaceMockRecorder) DeleteContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockInterface)(nil).DeleteContainer), arg0, arg1, arg2)
}

// GetBlobData mocks base method.
func (m *MockInterface) GetBlobData(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobData", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlobData indicates an expected call of GetBlobData.
func (mr *MockInterfaceMockRecorder) GetBlobData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobData", reflect.TypeOf((*MockInterface)(nil).GetBlobData), arg0, arg1)
}

// GetBlobDataV1 mocks base method.
func (m *MockInterface) GetBlobDataV1(arg0 context.Context, arg1, arg2, arg3 string) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobDataV1", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlobDataV1 indicates an expected call of GetBlobDataV1.
func (mr *MockInterfaceMockRecorder) GetBlobDataV1(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobDataV1", reflect.TypeOf((*MockInterface)(nil).GetBlobDataV1), arg0, arg1, arg2, arg3)
}

// ListBlobsWithPrefix mocks base method.
func (m *MockInterface) ListBlobsWithPrefix(arg0 context.Context, arg1, arg2 string) (storage.BlobListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlobsWithPrefix", arg0, arg1, arg2)
	ret0, _ := ret[0].(storage.BlobListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlobsWithPrefix indicates an expected call of ListBlobsWithPrefix.
func (mr *MockInterfaceMockRecorder) ListBlobsWithPrefix(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlobsWithPrefix", reflect.TypeOf((*MockInterface)(nil).ListBlobsWithPrefix), arg0, arg1, arg2)
}

// PutBlobData mocks base method.
func (m *MockInterface) PutBlobData(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlobData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlobData indicates an expected call of PutBlobData.
func (mr *MockInterfaceMockRecorder) PutBlobData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlobData", reflect.TypeOf((*MockInterface)(nil).PutBlobData), arg0, arg1, arg2)
}

// PutBlobDataV1 mocks base method.
func (m *MockInterface) PutBlobDataV1(arg0 context.Context, arg1, arg2, arg3 string, arg4 []byte, arg5 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlobDataV1", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlobDataV1 indicates an expected call of PutBlobDataV1.
func (mr *MockInterfaceMockRecorder) PutBlobDataV1(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlobDataV1", reflect.TypeOf((*MockInterface)(nil).PutBlobDataV1), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ReleaseLease mocks base method.
func (m *MockInterface) ReleaseLease(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLease", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLease indicates an expected call of ReleaseLease.
func (mr *MockInterfaceMockRecorder) ReleaseLease(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLease", reflect.TypeOf((*MockInterface)(nil).ReleaseLease), arg0, arg1, arg2, arg3, arg4)
}
